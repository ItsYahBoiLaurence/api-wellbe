generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  created_at   DateTime       @default(now())
  departments  Department[]
  batch_record Batch_Record[]
  Settings     Settings[]
}

model Department {
  id         Int        @id @default(autoincrement())
  name       String
  created_at DateTime   @default(now())
  company_id String
  company    Company    @relation(fields: [company_id], references: [name], onDelete: Cascade)
  employees  Employee[]

  @@unique([name, company_id])
}

model Employee {
  id            Int          @id @default(autoincrement())
  first_name    String
  last_name     String
  email         String       @unique
  password      String
  role          String       @default("employee")
  department_id Int
  department    Department   @relation(fields: [department_id], references: [id], onDelete: Cascade)
  tips          Tips[]
  advices       UserAdvice[]
}

model Tips {
  id         Int      @id @default(autoincrement())
  user       String
  user_email Employee @relation(fields: [user], references: [email])
  tip        String
  created_at DateTime
}

model UserAdvice {
  user       String   @id
  user_email Employee @relation(fields: [user], references: [email])
  advice     String
  created_at DateTime
}

model Question {
  id         Int     @id @unique(map: "Questions_id_key")
  question   String
  is_flipped Boolean
  domain     String
  subdomain  String
}

model Batch_Record {
  id                    Int                    @id @default(autoincrement())
  created_at            DateTime               @default(now())
  start_date            DateTime               @default(now())
  end_date              DateTime
  is_completed          Boolean                @default(false)
  company_name          String
  company               Company                @relation(fields: [company_name], references: [name], onDelete: Cascade)
  current_set_number    Int                    @default(1)
  employees_under_batch Employee_Under_Batch[]
  frequency             Frequency
}

model Employee_Under_Batch {
  id                Int          @id @default(autoincrement())
  email             String
  question_bank     Json
  is_completed      Boolean      @default(false)
  batch_id          Int
  batch             Batch_Record @relation(fields: [batch_id], references: [id], onDelete: Cascade)
  created_at        DateTime
  Answer            Answer[]
  set_participation Json         @default("[false,false,false,false,false]")
  department_id     Int

  @@unique([email, batch_id])
}

model Answer {
  id          Int                  @id @default(autoincrement())
  answer      Json
  employee_id Int
  employee    Employee_Under_Batch @relation(fields: [employee_id], references: [id], onDelete: Cascade)
}

enum Frequency {
  DAILY
  WEEKLY
}

model Settings {
  config_id String    @id
  company   Company   @relation(fields: [config_id], references: [name], onDelete: Cascade)
  frequency Frequency @default(DAILY)
}

model Advice {
  id            Int    @id @default(autoincrement())
  sub_domain    String
  low           String
  below_average String
  average       String
  above_average String
}
