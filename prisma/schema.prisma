generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  name         String         @unique
  created_at   DateTime       @default(now())
  batch_record Batch_Record[]
  departments  Department[]
  ScatterData  ScatterData[]
  Settings     Settings?
  id           String         @id @default(cuid())
}

model Department {
  id         String      @id @default(cuid())
  name       String
  created_at DateTime    @default(now())
  company_id String
  company    Company     @relation(fields: [company_id], references: [name], onDelete: Cascade)
  employees  Employee[]
  Wellbeing  Wellbeing[]

  @@unique([name, company_id])
}

model Employee {
  id              String       @id @default(cuid())
  first_name      String
  last_name       String
  email           String       @unique
  password        String
  role            String       @default("employee")
  department_id   String
  department      Department   @relation(fields: [department_id], references: [id], onDelete: Cascade)
  tips            Tips[]
  advices         UserAdvice[]
  wellbeing_score Wellbeing[]
}

model Tips {
  id            String   @id @default(cuid())
  user          String
  tip           String
  created_at    DateTime
  batch_created String
  user_email    Employee @relation(fields: [user], references: [email], onDelete: Cascade)
}

model UserAdvice {
  id            String   @id @default(cuid())
  user          String
  advice        String
  created_at    DateTime
  batch_created String
  user_email    Employee @relation(fields: [user], references: [email], onDelete: Cascade)

  @@unique([user, batch_created])
}

model Question {
  id         Int     @id @unique(map: "Questions_id_key")
  question   String
  is_flipped Boolean
  domain     String
  subdomain  String
}

model Batch_Record {
  id                    String                 @id @default(cuid())
  created_at            DateTime               @default(now())
  start_date            DateTime               @default(now())
  end_date              DateTime
  is_completed          Boolean                @default(false)
  company_name          String
  current_set_number    Int                    @default(1)
  frequency             Frequency
  company               Company                @relation(fields: [company_name], references: [name], onDelete: Cascade)
  employees_under_batch Employee_Under_Batch[]
  Wellbeing             Wellbeing[]
}

model Employee_Under_Batch {
  id                String       @id @default(cuid())
  email             String
  question_bank     Json
  is_completed      Boolean      @default(false)
  batch_id          String
  created_at        DateTime
  set_participation Json         @default("[false, false, false, false, false]")
  department_id     String
  Answer            Answer[]
  batch             Batch_Record @relation(fields: [batch_id], references: [id], onDelete: Cascade)

  @@unique([email, batch_id])
}

model Answer {
  id          String               @id @default(cuid())
  answer      Json
  employee_id String
  employee    Employee_Under_Batch @relation(fields: [employee_id], references: [id], onDelete: Cascade)
}

model Settings {
  config_id String    @id
  frequency Frequency @default(DAILY)
  company   Company   @relation(fields: [config_id], references: [name], onDelete: Cascade)
}

model Advice {
  id            Int    @id @default(autoincrement())
  sub_domain    String
  low           String
  below_average String
  average       String
  above_average String
}

model Wellbeing {
  id              String       @id @default(cuid())
  user_email      String
  created_at      DateTime
  wellbeing_score Json
  batch_id        String
  department      String
  batch           Batch_Record @relation(fields: [batch_id], references: [id], onDelete: Cascade)
  department_id   Department   @relation(fields: [department], references: [id], onDelete: Cascade)
  user            Employee     @relation(fields: [user_email], references: [email], onDelete: Cascade)

  @@unique([user_email, batch_id])
}

model ScatterData {
  id           String   @id @default(cuid())
  company_name String
  scatterData  Json
  created_at   DateTime
  company      Company  @relation(fields: [company_name], references: [name], onDelete: Cascade)
}

model Inbox {
  id         String   @id @default(cuid())
  subject    String
  receiver   String
  body       String
  created_at DateTime
  opened     Boolean  @default(false)
  tag        String
}

enum Frequency {
  DAILY
  WEEKLY
  EVERY_HOUR
  EVERY_MINUTE
}
